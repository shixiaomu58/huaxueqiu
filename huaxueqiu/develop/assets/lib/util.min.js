/**
 * 实用操作封装。 
 *
 * @author dongxiaochai@weiba66.com
 * @since 2015-04-23
 */

/*
 * 注册模块。
 * 
 * @date 2015-03-31
 * @author dongxiaochai@weiba66.com
 */
define(["jquery"], function($){
	//对数组的扩展
	(function(){
		/**
		 * 数组指定位置插入元素
		 * @param  {Integer} index 	位置索引
		 * @param  {All} item  		要插入的元素
		 * @return {Array} 			新生成的数组
		 */
		Array.prototype.insert = function(index, item){
			this.splice(index, 0, item);
		}

		/**
		 * 数组指定位置插入元素
		 * @param  {Integer} index 	位置索引
		 * @param  {Array} itemList 要插入的数组
		 * @return {Array} 			新生成的数组
		 */
		Array.prototype.insertBatch = function(index, itemList){
			if(itemList == null || itemList.length == 0){
				return;
			}
			for(var i = 0; i < itemList.length; i++){
				this.splice(index + i, 0, itemList[i]);
			}
		}

		/**
		 * 数组末尾插入元素
		 * @param  {Array} itemList 要插入的数组
		 * @return {Array} 			新生成的数组
		 */
		Array.prototype.pushBatch = function(itemList){
			if(itemList == null || itemList.length == 0){
				return;
			}
			for(var i = 0; i < itemList.length; i++){
				this.push(itemList[i]);
			}
		}
		var asList = [11,22,33,44,55];
		asList.insertBatch(2, [221,222,223]);
	})();

	var Obj = {
		REGEXP: {
			/**
			 * 手机。
			 */
			PHONE: /^(\+\d+)?1[34578]\d{9}$/,///^(((13[0-9]{1})|(15[0-9]{1})|(14[0-9]{1})|(18[0-9]{1}))+\d{8})$/,
			
			/**
			 * 邮编。
			 */
			ZIPCODE: /^[1-9][0-9]{5}$/,
			
			/**
			 * 邮箱。
			 */
			EMAIL: /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/,

			/**
			 * 日期。
			 */
			DATE: /^(0?[1-9]|1[0-2])-(0?[1-9]|[1-2][0-9]|3[0-1])$/,

			/**
			 * 身份证。
			 */
			IDCARD: /(^\d{18}$)|(^\d{15}$)|(^\d{17}(\d|X|x)$)/
		},
	
		/**
		 * 将时间转换成指定格式。
		 * 
		 * @param {String|Date|Number} sDateTime
		 * @param {String} sFormat 格式化字符串
		 * @return {Date}
		 */
		formatDate: function(sDateTime , sFormat) {   
			if(!sDateTime){
				return "";
			}
			var dDate = null,
				sDateType = $.type(sDateTime)
			;

			if (sDateType === "date") {	// 日期对象。
				dDate = sDateTime;
			} else if (sDateType === "number") {	// 毫秒值类型。
				dDate = new Date(Number(sDateTime));
			} else if (sDateType === "string") {	// 字数串类型。
				dDate = new Date(sDateTime.replace(/[-.]/g, "/"));
			}

		    var oFormat = {         
			    "M+" : dDate.getMonth() + 1, //月份         
			    "d+" : dDate.getDate(), //日         
			    "h+" : dDate.getHours() % 12 == 0 ? 12 : dDate.getHours() % 12, //小时         
			    "H+" : dDate.getHours(), //小时         
			    "m+" : dDate.getMinutes(), //分         
			    "s+" : dDate.getSeconds(), //秒         
			    "q+" : Math.floor((dDate.getMonth()+3)/3), //季度         
			    "S" : dDate.getMilliseconds() //毫秒         
		    };         
		    var oWeek = {         
			    "0" : "/u65e5",         
			    "1" : "/u4e00",         
			    "2" : "/u4e8c",         
			    "3" : "/u4e09",         
			    "4" : "/u56db",         
			    "5" : "/u4e94",         
			    "6" : "/u516d"        
		    };         
		    if(/(y+)/.test(sFormat)){         
		        sFormat = sFormat.replace(RegExp.$1, (dDate.getFullYear() + "").substr(4 - RegExp.$1.length));         
		    }         
		    if(/(E+)/.test(sFormat)){         
		        sFormat = sFormat.replace(RegExp.$1, ((RegExp.$1.length > 1) ? (RegExp.$1.length > 2 ? "/u661f/u671f" : "/u5468") : "") + oWeek[this.getDay() + ""]);         
		    }         
		    for(var k in oFormat){         
		        if(new RegExp("("+ k +")").test(sFormat)){         
		            sFormat = sFormat.replace(RegExp.$1, (RegExp.$1.length == 1) ? (oFormat[k]) : (("00" + oFormat[k]).substr(("" + oFormat[k]).length)));         
		        }         
		    }        
		    return sFormat;    
		},
		/**
		 * 将时间转化成Long型
		 *
		 * @param {String|Date|Number} sDateTime
		 * @return {Date}
		 */
		transDateToLong: function(sDateTime){
			if(!sDateTime){
				return null;
			}
			var dDate = null,
				sDateType = $.type(sDateTime)
				;

			try{
				if (sDateType === "date") { // 日期对象。
					dDate = sDateTime;
				} else if (sDateType === "number") {    // 毫秒值类型。
					dDate = new Date(Number(sDateTime));
				} else if (sDateType === "string") {    // 字数串类型。
					dDate = new Date(sDateTime.replace(/[-.]/g, "/"));
				}
				return +dDate;
			} catch(ex){
				return null;
			}
		},
		/**
		 * 四舍五入保留小数
		 * @param  {Number}  num			需要转化的数值
		 * @param  {Integer}  cutNum       	保留的小数位数
		 * @param  {Boolean} isRemoveZero 	是否移除末尾的0，默认不需要
		 * @return {Number}
		 */
		toFixed: function(num, cutNum, isRemoveZero){
			var sReturn = '0';
			num = parseFloat(num);
			if(isNaN(num)){
				num = 0;
			}
			cutNum = cutNum || 0;
			if(num.toString() == "NaN"){
				num = 0;
			} else{
				num = num.toFixed(cutNum);
			}

			sReturn = num.toString();
			if(isRemoveZero){
				while(sReturn.indexOf('.') > -1 && sReturn.endsWith('0')){
					sReturn = sReturn.substr(0, sReturn.length - 1);
				}
				if(sReturn.endsWith(".")) {
					sReturn = sReturn.substring(0, sReturn.length - 1);
				}
			}
			return sReturn;
		},

		/**
		 * 加载样式文件到 head 中。
		 * 如果某样式在 3 秒钟内未能加载成功，则会主动以超时处理，并主动调用回调函数。
		 * 
		 * @param {String} sSrc
		 * @param {Function|undefined} fnSuccess 仅非 IE 浏览器仅支持较新版本的。
		 * @param {Boolean} 返回当前是 load 调用的回调还是超时主动调用的， load: true, timeout: false。
		 * @return {jQuery} 创建的 link 对象。
		 */
		getStyle: function(sSrc, fnSuccess) {
			var bIsLoad = false,
				nTimeout = setTimeout(function() {
					if (!bIsLoad) {
						fnSuccess && fnSuccess(false); // timeout 方式回调。
						bIsLoad = true;
					}
				}, 3 * 1000)				
			;
	
			return $('<link href="' + sSrc + '" rel="stylesheet" />')
				.appendTo("head")
				// onload 事件非 IE 浏览器仅较新的版本才支持。
				.on("load", function() {
					if (!bIsLoad) {
						clearTimeout(nTimeout);
						fnSuccess && fnSuccess(true); // load 方式回调。
						bIsLoad = true;
					}
				})
			;
		},

		/**
		 * 将字数符反参数解决成对象。
		 * 与 $.param 相对。
		 * 
		 * @method
		 * @param {String} sParams
		 * @return {Object}
		 */
		unparam: function(sParams) {
			var asParams = (sParams || "").split("&"),
				oParams = {},
				asSplitedParam = []
			;

			for (var i = asParams.length - 1; i >= 0; i--) {
				asSplitedParam = asParams[i].split("=");
				oParams[asSplitedParam[0]] = asSplitedParam[1] || "";
			}

			return oParams;
		},
		
		/**
		 * 从 URL 中读取某个参数值。
		 * 
		 * @method getParam
		 * @param {String} sName
		 * @param {String|undefined} sHref ({location.href})
		 * @return {String}
		 */
		getParam : function (sName, sHref) {
		    return this.decodeUri((this.unparam((sHref || location.href).split("?")[1] || "")[sName] || "")).replace(/#*?/g, "");
		},
			
		/**
		 * 占位符替换工厂。
		 * 
		 * @method
		 * @param {String} sContent 含占位符的字符串。
		 * 	当要被替换的内容中含未知替换数据，则会保留当前点位符。
		 * @param {Object} oData 要替换的点位符数据，依据对象的键名与点位符一一对应，功能类似 KISSY.substitute。
		 * @return {String} 返回替换后的字符串。
		 */
		substitute: function(sContent, oData) {
			if (!oData) {
				return sContent;
			}

			for (var p in oData) {
				sContent = sContent.replace(new RegExp("\\{" + p + "\\}", "g"), oData[p]);
			}

			return sContent;
		},

		/**
         *
         * @param src
         * @returns {src}
         */
        getDprImg: function(src){
            var nDpr = window.devicePixelRatio;
            if(!src){
                return "";
            } else if(nDpr >= 3){
                var nIndex = src.lastIndexOf(".");
                if(nIndex > -1){
                    src = src.substr(0, nIndex) + "@3x" + src.substr(nIndex, src.length - nIndex);
                }
            }
            return src;
        },

        /**
         * 设置图片size
         * @param src
         * @param size
         * @returns {src}
         */
        setImgSize: function(src, size) {
            if (!src) {
                return "";
            } else if (!size) {
                return src;
            } else {
                var nIndex = src.lastIndexOf(".");
                if (nIndex > -1) {
                    src = src.substr(0, nIndex) + "-" + size + src.substr(nIndex, src.length - nIndex);
                }
            }
            return src;
        },

        /**
         * url进行编码
         * @param  {String} str 编码字符串
         * @return {String} 编码后的值
         */
        encodeUri: function(str){
        	return encodeURIComponent(str);
        },

        /**
         * url进行解码
         * @param  {String} str 解码字符串
         * @return {String} 解码后的值
         */
        decodeUri: function(str){
        	return decodeURIComponent(str);
        },

        /**
         * 获得本地存储数据
         * @param  {String} key       存储关键词
         * @param  {Integer} storeTime 	有效期（单位：分钟）
         * @return {Object}
         */
        getLocalData: function(key, storeTime){
        	var _this = this;
            if(!key){
                return null;
            }

            var oStore;
            try{
            	oStore = localStorage.getItem(key);
            }catch(ex){
            }
            if(oStore){
                oStore = JSON.parse(oStore);
            }

            if(!oStore){
                return null;
            } else if(!oStore.time || +new Date > oStore.time + storeTime * 60 * 1000){
				_this.removeLocalData(key);
				return null;			
            } else{
                return oStore.data;
            }
        },

        /**
         * 获得本地存储数据
         * @param  {String} key       	存储关键词
         * @param {void}
         */
        setLocalData: function(key, data){
            var oStore = {
            	time: +new Date(),
                // validDate: +new Date + (storeTime || 10000000) * 1000 * 60,
                data: data
            }

            try{
            	localStorage.setItem(key, JSON.stringify(oStore));
            }catch(ex){
            }
        },

        /**
         * 删除本地存储数据
         * @param  {String} key       存储关键词
         * @return {void}
         */
        removeLocalData: function(key){
            try{
        		localStorage.removeItem(key);
            }catch(ex){
            }
        },

        /**
         * 获得本地存储数据
         * @param  {String} key       存储关键词
         * @return {Object}
         */
        getSessionData: function(key){
        	var _this = this;
            if(!key){
                return null;
            }

            var oStore;
            try{
        		oStore = sessionStorage.getItem(key);
            }catch(ex){
            }
            if(oStore){
                oStore = JSON.parse(oStore);
            }

            if(!oStore){
                return null;		
            } else{
                return oStore.data;
            }
        },

        /**
         * 获得本地存储数据
         * @param  {String} key       存储关键词
         * @param {void}
         */
        setSessionData: function(key, data){
            var oStore = {
                data: data
            }
            try{
            	sessionStorage.setItem(key, JSON.stringify(oStore));
            }catch(ex){
            }
        },
        
        /**
         * 删除本地存储数据
         * @param  {String} key       存储关键词
         * @return {void}
         */
        removeSessionData: function(key){
            try{
        		sessionStorage.removeItem(key);
            }catch(ex){
            }
        },
        /**
         * 是否性能不好的安卓，可用于针对性地进行降级的处理和体验（，别处拷的，还未验证）
         */
        isBadAndroid: (function() {
			var appVersion = window.navigator.appVersion;
			
			if (/Android/.test(appVersion) && !(/Chrome\/\d/.test(appVersion))) {
				var safariVersion = appVersion.match(/Safari\/(\d+.\d)/);
				if(safariVersion && typeof safariVersion === "object" && safariVersion.length >= 2) {
					return parseFloat(safariVersion[1]) < 535.19;
				} else {
					return true;
				}
			} else {
				return false;
			}
		})(),

		/**
		 * JSON转成字符串
		 * @param  {Object} json json对象
		 * @return {String}     转化后字符串
		 */
		stringify: function(json){
			var _this = this;
			if(json === null || json === undefined){
				return json;
			}
			if(window.JSON){
				return JSON.stringify(json); 
			} else {
				var str = "";
				if(json.length != undefined) {//数组
					for(var i in json){
						var item = json[i],
							sType = typeof(item)
						;

						if(item === undefined){
							str += null + ",";
						} else if(sType === "object"){
							str += _this.stringify(item) + ",";
						} else if(sType === "string"){
							str += "\"" + item + "\"" + ",";
						} else if(sType === "function"){
							str += null + ",";
						} else{
							str += item + ",";
						}
					}
					if(str){
						str = str.substr(0, str.length - 1);
					}
					str = "[" + str + "]";
				} else {//对象
					for(var key in json){
						var item = json[key],
							sType = typeof(item),
							sFormat = '"{key}":{val},'
						;
						
						if(item === undefined || sType === "function"){
							continue;
						}
						if(sType === "object"){
							item = _this.stringify(item);
						} else if(sType === "string"){
							item = '"' + item + '"';
						}
						str += _this.substitute(sFormat, {key:key,val:item});
					}
					if(str){
						str = str.substr(0, str.length - 1);
					}
					str = "{" + str + "}";
				}
				return str;
			}
		},

        /**
         * 打开app 参考实现方式：http://www.cnblogs.com/shadajin/p/5724117.html
         * @param  {String} sPath app对应的schame url
         * @param  {String} wapUrl 启动类型
         * @return {void}
         */
        openApp: function(sPath, wapUrl){
        	// if(!sPath){
        	// 	return;
        	// }
            //判断当前的环境
            var UA = navigator.userAgent,
                oParam = {
                    isIOS : !!UA.match(/iPhone|iPod|iPad/i),
                    isAndroid : !!UA.match(/Android/i),
                    isWindows : !!UA.match(/Windows Phone/i),
                    isWXBrowser : !!UA.match(/micromessenger/i),
                    isQQBrowser : !!UA.match(/qq/i)
                },
                oDefaults = {//itms-apps
                	btjf: {
                		iosDownUrl: "https://itunes.apple.com/cn/app/bei-tai-hao-che-er-shou-che/id1066750890?mt=08",            //一般为app store地址
	                    androidDownUrl:"http://m.b2b.cheok.com/download.html", //直接下载地址或者页面都是可以的
	                    wxDownUrl: "http://a.app.qq.com/o/simple.jsp?pkgname=com.aika.dealer"   //微信应用宝地址
                	},
                	btcust: {
                		iosDownUrl: "https://itunes.apple.com/cn/app/bei-tai-hao-che-er-shou-che/id1219866503?mt=08",            //一般为app store地址
	                    androidDownUrl:"http://m.cheok.com/download.html", //直接下载地址或者页面都是可以的
	                    wxDownUrl: "http://a.app.qq.com/o/simple.jsp?pkgname=com.btjf.app.cheok"   //微信应用宝地址
                	},
                	akstaff: {
                		iosDownUrl: "http://n.cheok.com/download.html",            //一般为app store地址
	                    androidDownUrl:"http://n.cheok.com/download.html", //直接下载地址或者页面都是可以的
	                    wxDownUrl: "http://n.cheok.com/download.html"   //微信应用宝地址
                	}
                },
                aScheme = ["btjf","akstaff","btcust"], //现有的scheme集合
                sScheme, //传来的sPath如果有scheme，将会存在这里
                sHost,
                defaultScheme,
                defaultHost
            ; 

            //取得deafult scheme和host
            function getDefaultSchemePrefix(defaultPath){
            	defaultScheme = defaultPath.split("://")[0];
            	defaultHost = defaultPath.split("://")[1];
            }
            getDefaultSchemePrefix(GConfig.APP_PAGE_PREFIX);

            //取得scheme 和 host
            function getSchemePrefix(path) {
            	if(path.indexOf("://") !== -1){
            		sScheme = path.split("://")[0];
            		sHost = path.split("://")[1];
            		return;
            	}
            	for(var i=0, len=aScheme.length; i<len; i++){
            		if(path.split("/")[1] == aScheme[i]){
            			sScheme = aScheme[i];
            			sPath = sPath.slice(sPath.split("/")[1].length+1);
            			break;
            		}
            	}
            }

            sPath && getSchemePrefix(sPath);
           
           	sScheme = sScheme || defaultScheme;
            sHost = sHost || defaultHost;
            console.log(sPath);
            if(!sPath){
        		sPath = sScheme + "://" + sHost + "/index";
        	}else{
        		if(sPath.indexOf(sScheme+"://") === -1 && sPath.indexOf(sHost) === -1){
                	if(sPath.indexOf("/") !== 0){
                		sPath = "/" + sPath;
                	}
                    sPath = sScheme + "://" + sHost + sPath;
                }
                
        	}
         

            //已经是在app内(二维码扫描)
            if(window.wv){
            	wv.getIsInApp().then(function(){
            		//已经安装，但不是一个app内的话还是d
            		if(wv.appInfo.scheme && sPath.indexOf(wv.appInfo.scheme + ":") == -1){
            			goToPage();
            		} else{
            			wv.openPage({
                            url: sPath,
                            type: 1,
                            scheme: sScheme + "://www.btjf.com"
                        });
            		}
            	}, function(){
            		goToPage();
            	});
            } else{
            	goToPage();
            }

            // sPath = "btjf://www.btjf.com/business/cousult";
            // sPath = "btjf://www.btjf.com/service/carValuation";
            // sPath = "weixin://";
            // sPath = "taobao://";
            function goToPage(){
	            var downloadUrl = wapUrl || (oParam.isWXBrowser ? oDefaults[sScheme].wxDownUrl : ""), 
		            jIframe, 
		            clickAt = new Date().getTime(),    // 点击那一刻时间
	            	nMilSec = 1100,
	            	isOpen = false//app是否已经打开，针对安卓
	        	;            

	            if (oParam.isAndroid) {
	                downloadUrl = downloadUrl || oDefaults[sScheme].androidDownUrl;

		        	jIframe = $('<iframe class="ifOpenApp"></iframe>')
		                .hide()
		                .attr("src", sPath)
		                .appendTo($('body'))
		            ;

				    // //检查app是否打开
				    // function checkOpen(callback){
				    //     var _clickTime = +(new Date());
				    //     function check(elsTime) {
				    //         if ( elsTime > 3000 || document.hidden || document.webkitHidden) {//hidden表示页面是否为用户当前观看的页面
				    //             callback(true);
				    //         } else {
				    //             callback(false);
				    //         }
				    //     }
				    //     //启动间隔20ms运行的定时器，并检测累计消耗时间是否超过3000ms，超过则结束
				    //     var _count = 0, intHandle;
				    //     intHandle = setInterval(function(){
				    //         _count++;        
				    //         var elsTime = +(new Date()) - _clickTime;
				    //         if (_count>=100 || elsTime > 3000 ) {
				    //             clearInterval(intHandle);
				    //             check(elsTime);
				    //         }
				    //     }, 20);
				    // }
  
				    // checkOpen();
	            } else {//ios9以上，用iframe无法实现跳转，所以只能当前页重定向
	                downloadUrl = downloadUrl || oDefaults[sScheme].iosDownUrl;         
	                window.location = sPath;
	            }

	            var timer = setTimeout(function() {
	            	//有的浏览器唤起app的话会终止浏览器进程，所以超过这个时间表示已经切换到别的浏览器了
	            	//(经测试大部分第三方浏览器都不会终止进程)
	                if (new Date().getTime() - clickAt < nMilSec + 500 && isOpen == false) {
	                    window.location = downloadUrl;
	                }
	               	
	               	removeIframe();
	            }, nMilSec); 

	            window.onblur = function() {
	                clearTimeout(timer);
	                removeIframe();
	            }

	            //移除iframe
	            function removeIframe(){
	               	if(jIframe){
		                jIframe.remove();
		                jIframe = null;
	               	}
	            }
            }
        }
	};
	
	window.Util = Obj;
	return Obj;
});