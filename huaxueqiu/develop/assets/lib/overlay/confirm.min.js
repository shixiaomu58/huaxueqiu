/*
 * 确认对话图层。
 * 需要引入 overlay、button 组件。
 * 
 * @since 2015-10-08
 */

define(["jquery", "util", "overlayBase"], function($, Util, Overlay) {
	var
	ELEMENMT_CLASS = "gx-confirmBase-overlay confirm-overlay",
	SUCCESS_CLASS = "confirm-success-overlay",
	ERROR_CLASS = "confirm-error-overlay",

	/**
	 * 事件类型。
	 */
	EVENT_TYPE = {
		OK: "ok",
		CANCEL: "cancel"
	},

	// 图层模板。
	TEMPLATE =
		  '<div class="content-wrapper">'
		//+	'<i class="icon"></i>'
		+	'<div class="contents">{titleHtml}{descHtml}</div>'
		+	'<div class="actions half-top-border">{cancelHtml}{okHtml}</div>'
		+ '</div>'
	,
	SUB_CONTENT_TEMPLATE = {
		titleHtml: '<div class="ks-title">{title}</div>',
		descHtml: '<div class="ks-desc">{desc}</div>',
		okHtml: '<a href="javascript:void(0);" class="ks-button ok" tabindex="0">{okText}</a>',
		cancelHtml: '<a href="javascript:void(0);" class="ks-button cancel half-right-border" tabindex="0">{cancelText}</a>'
	},

	// 默认配置。
	DEFAULT_CONFIG = {
		okText : "确定",
		cancelText : "取消",
		title : "",
		desc: "",//
		onok: null,
		oncancel: null
	},


	/**
	 * Confirm
	 * 
	 * @method Fn
	 * @param {Object|undefined} oConfig
	 *		type {String} 显示类型。 ({FN.ERROR_TYPE}) [{FN.SUCCESS_TYPE}|{FN.ERROR_TYPE}]
	 *		title {String} 显示的文案。
	 *		title {String} 窗口标题文案 (提示)。
	 *		okText {String} 确认显示的文案 (确认)。
	 *		cancelText {String} 取消显示的文案 (取消)。
	 *		onafterrenderui {Function|undefined} 构造 UI 完成后。 
	 *			#param {KISSYOverlay} 图层对象。
	 *		onshow {Function|undefined} 显示
	 *			#param {KISSYOverlay} 图层对象。
	 *		onhide {Function|undefined} 隐藏
	 *			#param {KISSYOverlay} 图层对象。
	 *		onok {Function|undefined} 确认操作回调。
	 *			#param {KISSYOverlay} 图层对象。
	 *		oncancel {Function|undefined} 取消操作回调。
	 *			#param {KISSYOverlay} 图层对象。
	 * @return {KISSYOverlay}
	 */
	Fn = function (oConfig) {
		if (typeof(oConfig) === "string") {	// 首参数为字符串。
			var fnOkCallback = $.isFunction(arguments[1]) ? arguments[1] : null,
				fnCancelCallback = $.isFunction(arguments[2]) ? arguments[2] : null
			;

			oConfig = {
				type : Fn.ERROR_TYPE,
				desc : oConfig,
				cancelText: ""
			};
			oConfig.onok = fnOkCallback;	// 第二个参数若有效，且是函数型的，则认为是 ok 回调函数。
			oConfig.oncancel = fnCancelCallback;	// 第三个参数若有效，且是函数型的，则认为是 cancel 回调函数。
		}

		//调用webview接口
		if(GConfig.isInApp){
			wv.showConfirmDialog({
                title: oConfig.title || "",
                content: oConfig.desc,               
                cancelLabel: oConfig.cancelText,       
                cancelCallback: oConfig.oncancel,      
                confirmLabel: oConfig.okText,      
                confirmCallback: oConfig.onok    
			});

			return;
		}
		
		// 合并配置。
		oConfig = $.extend({closable : false}, DEFAULT_CONFIG, oConfig || {});
		
		oConfig.elCls = ELEMENMT_CLASS + " "
						+ (oConfig.elCls ? oConfig.elCls + " " : "")
						+ (oConfig.type != Fn.SUCCESS_TYPE ? ERROR_CLASS : SUCCESS_CLASS)
		;
		
		// 替换内容占位符。
		oConfig.content = oConfig.content || Util.substitute(TEMPLATE, {
			titleHtml : (oConfig.title ? Util.substitute(SUB_CONTENT_TEMPLATE["titleHtml"], {title:oConfig.title}) : ""),
			descHtml : (oConfig.desc ? Util.substitute(SUB_CONTENT_TEMPLATE["descHtml"], {desc:oConfig.desc}) : ""),
			okHtml: (oConfig.okText ? Util.substitute(SUB_CONTENT_TEMPLATE["okHtml"], {okText:oConfig.okText}) : ""),
			cancelHtml: (oConfig.cancelText ? Util.substitute(SUB_CONTENT_TEMPLATE["cancelHtml"], {cancelText:oConfig.cancelText}) : "")
		});

		Overlay.call(this, oConfig);	// 引用 Overlay 的构造函数初始化。
	
		this.__init();	// 执行自身初始化。
		
		Overlay.instance = this;
	}
	;


	// 从 Overlay 中扩展公共方法。
	$.extend(Fn.prototype, Overlay.prototype, {
		/**
		 * 与 Overlay 类中不同，该为仅自己访问的初始化方法。
		 * 
		 * @method
		 * @return {Class}
		 */
		__init: function() {
			return this._addEventListener();
		},


		/**
		 * 侦听事件。
		 * 
		 * @private
		 * @method
		 * @return {Class}
		 */
		_addEventListener: function() {
			var cSelf = this,
				jElement = cSelf.getElement()
			;
	
			jElement && jElement
				.on("hide", function() {
					cSelf.destroy();	// 隐藏即销毁。
				})
				// 为“确认”按钮侦听事件。
				.find(".actions .ok").on("click", function() {
					cSelf.config.onok && cSelf.config.onok(cSelf);
					cSelf.hide();
				})
			
				// 为“取消”按钮侦听事件。
				.end().find(".actions .cancel").on("click", function() {
					cSelf.config.oncancel && cSelf.config.oncancel(cSelf);
					cSelf.hide();
				})
			;

			return cSelf;
		}
	});


	// 静态成员设置。
	Fn.SUCCESS_TYPE = "success";
	Fn.ERROR_TYPE = "error";

	window.Confirm = Fn;
	return Fn;
});