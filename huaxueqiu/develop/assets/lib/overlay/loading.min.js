/*
 * ajax加载中显示
 * 
 * @since 2015-04-27
 */

define(["jquery", "util", "overlayBase", "say"], fnOverlayLoading);

/**
 * 提示函数体。
 * 
 * @method fnOverlayLoading
 * @return {Function}
 */
function fnOverlayLoading($, Util, Overlay, Say) {	
	var
		ELEMENMT_CLASS = "loading-overlay",
		// 图层模板。
		TEMPLATE =
			'<div>'
			+	'<div class="icon-box"><i class="loading-icon"></i></div>'
			+	'<div class="ks-title">{title}</div>'
			+'</div>',

		// 默认配置。
		DEFAULT_CONFIG = {
			showShadow: true,	//是否显示阴影，默认不显示
			timeout: 10000,		//超时时间
			showIcon: true		//是否显示加载中的icon
		}
	;
		
	var _loading = {
		/*
		 * 默认配置
		 */
		_config: DEFAULT_CONFIG,

		/*
		 * 当前阴影弹窗对象
		 */
		loadingInstance: null,

		/*
		 * 是否加载中
		 */
		isLoading: false,

		/*
		 * 显示超时定时器
		 * @type {function}
		 */
		timeout: null,

		/*
		 * 显示加载中
		 */
		show: function(oConfig){
			var _self = this;
			_self.isLoading = true;

			if (!oConfig || $.type(oConfig) === "string" || $.type(oConfig) === "number") {
				oConfig = {
					title: oConfig
				};
			};
		
			//调用webview接口
			if(GConfig.isInApp){
				wv.showSubmiting(oConfig.title);
				return;
			}
			
			// 合并配置。
			oConfig = $.extend({closable: false}, _self._config, oConfig || {});
			oConfig.elCls = ELEMENMT_CLASS + " "
				+ (oConfig.elCls ? oConfig.elCls : "")
			;
			
			// 替换内容占位符。
			oConfig.content = Util.substitute(TEMPLATE, {
				title : oConfig.title || ""
			});

			_self.loadingInstance = new Overlay(oConfig);// 引用 Overlay 的构造函数初始化。

			//设置超时定时器
			_self.timeout = setTimeout(function(){
				if(_self.isLoading){
					_self.hide();
					new Say({
						title: "请求超时",
						type: "error"
					});
				}
			}, _self._config.timeout);
// console.log("showLoading");
		},

		/*
		 * 隐藏加载中
		 */
		hide: function(){
			var _self = this;
			
			//调用webview接口
			if(GConfig.isInApp){
				wv.hideSubmiting();
				return;
			}

			_self.loadingInstance && _self.loadingInstance.destroy();
			_self.isLoading = false;
		}
	};

	window.Loading = _loading;

	return _loading;
}