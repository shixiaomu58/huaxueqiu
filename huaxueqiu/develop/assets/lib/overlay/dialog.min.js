/*
 * 含页头的高级对话框弹窗。
 * 
 * @since 2015-04-23
 */


/*
 * 注册模块。
 * 
 * @date 2013-08-22
 * @author dongli.du@guanxin.com
 */
define(["jquery", "util", "framework/overlay/base.min"], fnOverlayDialog);


/**
 * 警告对话框图层函数。
 * 
 * @method 
 * @param {Function} require
 * @param {Object} exports
 * @param {Object} module
 * @return {Function}
 */
function fnOverlayDialog($, Util, Overlay) {

	var
	ELEMENMT_CLASS = "gx-dialogBase-overlay dialog-overlay ",
	SUCCESS_CLASS = "dialog-success-overlay",
	ERROR_CLASS = "dialog-error-overlay",

	// 图层模板。
	TEMPLATE =
		  '<div class="ks-stdmod-body">'
			+ '<div class="top-title"><b class="BgLayer">{title}</b><i class="rightBg BgLayer"></i></div>'
			+ '<div class="ks-edit-content">{content}</div>'
		+'</div>'
	,

	// iframe 标签的标签。
	IFRAME_TAG = '<iframe src="{src}" class="dialog-frame" frameborder="0"></iframe>',
	
	// 默认配置。
	DEFAULT_CONFIG = {
		title : "标题",
		content: "",
		iframe: "",
		autoSize: true,
		minWidth: 0,
		minHeight: 0,
		maxWidth: 0,
		maxHeight: 0,
		onok: null,
		oncancel: null
	},


	/**
	 * dialog
	 * 
	 * @method Fn
	 * @param {Object|undefined} oConfig
	 *		title {String} 显示的文案。
	 *		content {String} 内容。
	 *		iframe {String} 如果该值不为空则会将使用一个 iframe 标签作为内容，content 将无效。
	 *
	 *		autoSize {Boolean}	iframe 是否可自适应大小。
	 *		minWidth {Number}	自适应大小时的最小宽度。
	 *		minHeight {Number}	最小高度。
	 *		maxWidth {Number}	最大宽度。
	 *		maxHeight {Number}	最大高度
	 *
	 *		onafterrenderui {Function|undefined} 构造 UI 完成后。 
	 *			#param {KISSYOverlay} 图层对象。
	 *		onshow {Function|undefined} 显示
	 *			#param {KISSYOverlay} 图层对象。
	 *		onhide {Function|undefined} 隐藏
	 *			#param {KISSYOverlay} 图层对象。
	 *
	 * 第二种参数接收方式。
	 *  {String} title
	 *  {String} content
	 * 	{Function|undefined} callback.hide 或其它全部使用默认参数。
	 * @return {KISSYOverlay}
	 */
	Fn = function (oConfig) {
		if (typeof(oConfig) === "string") {	// 首参数为字符串。
			oConfig = {
				title : oConfig,
				onhide: arguments[1]
			};
		}

		// 合并配置。
		oConfig = $.extend({}, DEFAULT_CONFIG, oConfig || {});
		/*oConfig.elCls = ELEMENMT_CLASS + oConfig.elCls;*/
		oConfig.elCls = ELEMENMT_CLASS 
						+ (oConfig.elCls ? oConfig.elCls + " " : "")
						+ (oConfig.type != Fn.SUCCESS_TYPE ? ERROR_CLASS : SUCCESS_CLASS)
		;
		
		// 替换内容占位符。
		var sContent = oConfig.iframe
				? Util.substitute(IFRAME_TAG, {
					src: oConfig.iframe
				})
				: oConfig.content
		;
		// oConfig.content = Util.substitute(TEMPLATE, {
		// 	title : oConfig.title,
		// 	content: sContent
		// });
		oConfig.content = sContent;

		Overlay.call(this, oConfig);	// 引用 Overlay 的构造函数初始化。
		
		this.__init();	// 执行自身初始化。
	}
	;


	// 从 Overlay 中扩展公共方法。
	$.extend(Fn.prototype, Overlay.prototype, {
		/**
		 * 与 Overlay 类中不同，该为仅自己访问的初始化方法。
		 * 
		 * @method
		 * @return {Class}
		 */
		__init: function() {
			return this
				._addEventListener()
				._autoSize()
			;
		},


		/**
		 * 侦听事件。
		 * 
		 * @private
		 * @method
		 * @return {Class}
		 */
		_addEventListener: function() {	
			var cSelf = this,
				jElement = cSelf.getElement()
			;
			// console.log(this.config);
			jElement && jElement
				.on("hide", function() {
					cSelf.destroy();	// 隐藏即销毁。
				})
				// 为“确认”按钮侦听事件。
				/*.find(".actions .ok").on("click", function() {
					cSelf.config.onok && cSelf.config.onok(cSelf);
					//cSelf.hide();
				})*/
			;
				
				// 为“取消”按钮侦听事件。
				/*.find(".actions .cancel").on("click", function() {
					cSelf.config.oncancel && cSelf.config.oncancel(cSelf);
					cSelf.hide();
				})*/
			;

			return cSelf;
		},


		/**
		 * 自动调整框架大小。
		 * 
		 * @return {Class}
		 */
		_autoSize: function() {
			var cSelef = this,
				oConfig = cSelef.config,
				jIframe = null
			;

			if (oConfig.iframe && oConfig.autoSize) {	// 仅当前页面使用了 iframe 又允许自适应大小时才操作。
				jIframe = cSelef.getElement().find("iframe");

				jIframe.on("load", resizeHandler);
			}

			return cSelef;


			function resizeHandler() {
				var oIframeDoc = jIframe.get(0).contentWindow.document,
					oIframeDocE = oIframeDoc.documentElement,
					oIframeBody = oIframeDoc.body
				;

				console.log(oIframeDocE.clientWidth || oIframeBody.clientWidth,
							oIframeDocE.clientHeight || oIframeBody.clientHeight);
			}
		}
	});


	// 静态成员设置。
	Fn.SUCCESS_TYPE = "success";
	Fn.ERROR_TYPE = "error";


	return Fn;
}