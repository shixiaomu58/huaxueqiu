/*
 * 通用提示类
 * 
 * @since 2015-09-29
 */

define(["jquery", "util", "overlayBase"], function fnOverlaySay($, Util, Overlay) {	
	var
		ELEMENMT_CLASS = "say-overlay",
		// 图层模板。
		TEMPLATE =
			'<div>'
			+ 	'<i class="icon {type}"></i>'
			+	'<div class="ks-title">{title}</div>'
			+'</div>',
			
		SHOW_TIME = 2,	// 单位秒。
		
		//事件类型
		EVENT_TYPE = {
			HIDE: "hide"
		},
	
		// 默认配置。
		DEFAULT_CONFIG = {
	        mask: false, // 产品说这个say的弹窗不要mask背景遮罩
			title: "",		//标题
			type: "warnning",	//类型：success成功（ls1），error失败（ls2），warnning警示（as6）
			onhide: null	//隐藏回调函数
		},


		/**
		 * 
		 * @param {Object} oConfig
		 */
		Fn = function (oConfig) {
			if ($.type(oConfig) === "string" || $.type(oConfig) === "number") {
				oConfig = {
					title: oConfig,
					type: Fn.WARNNING_TYPE
				};
			};

			//调用webview接口
			if(GConfig.isInApp){
				if(oConfig.type == Fn.WARNNING_TYPE){//警示
					wv.showWarning(oConfig.title, oConfig.onhide);
				} else if(oConfig.type == Fn.SUCCESS_TYPE) {
					wv.showSuccess(oConfig.title, oConfig.onhide);
				} else {
					wv.showError(oConfig.title, oConfig.onhide);
				}

				return;
			}
			
			// 合并配置。
			oConfig = $.extend({closable : false}, DEFAULT_CONFIG, oConfig || {});
		
			oConfig.showTime = oConfig.showTime || SHOW_TIME;
			oConfig.elCls = ELEMENMT_CLASS + " "
				+ (oConfig.elCls ? oConfig.elCls + " " : "")
				+ oConfig.type
			;
			
			// 替换内容占位符。
			oConfig.content = Util.substitute(TEMPLATE, {
				title : oConfig.title.toString() || "",
				type : oConfig.type
			});

			Overlay.call(this, oConfig);	// 引用 Overlay 的构造函数初始化。
		
			this.__init();	// 执行自身初始化。
		}
	;


	// 从 Overlay 中扩展公共方法。
	$.extend(Fn.prototype, Overlay.prototype, {
		/**
		 * 与 Overlay 类中不同，该为仅自己访问的初始化方法。
		 * 
		 * @method
		 * @return {Class}
		 */
		__init: function() {
			return this._addEventListener().__hide();
		},

		__hide: function(){
			var cSelf = this;

			// 指定时间后，自动消失。
			setTimeout(function() {
				cSelf.destroy();
				cSelf.config.onhide && cSelf.config.onhide();
			}, cSelf.config.showTime * 1000);
			
			return this;
		},


		/**
		 * 侦听事件。
		 * 
		 * @private
		 * @method
		 * @return {Class}
		 */
		_addEventListener: function() {
			var cSelf = this,
				jElement = cSelf.getElement()
			;
	
			// jElement && jElement
			// 	.on("hide", function() {
			// 		cSelf.destroy();	// 隐藏即销毁。
			// 	})
			// 	// 为“确认”按钮侦听事件。
			// 	.find(".actions .ok").on("click", function() {
			// 		cSelf.config.onok && cSelf.config.onok(cSelf);
			// 		cSelf.hide();
			// 	})
			
			// 	// 为“取消”按钮侦听事件。
			// 	.end().find(".actions .cancel").on("click", function() {
			// 		cSelf.config.oncancel && cSelf.config.oncancel(cSelf);
			// 		cSelf.hide();
			// 	})
			// ;

			return cSelf;
		}
	});


	// 静态成员设置。
	Fn.SUCCESS_TYPE = "success";
	Fn.ERROR_TYPE = "error";
	Fn.WARNNING_TYPE = "warnning";

	window.Say = Fn;
	return Fn;
});