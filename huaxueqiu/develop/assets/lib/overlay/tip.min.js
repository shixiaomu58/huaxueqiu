/*
 * 表单警示类
 *
 * @author dongxiaochai@163.com
 * @since 2015-12-15
 */

define(["jquery", "util"], function fnOverlaySay($, Util) {
    // 检测当前页面是否已加载了必要的样式文件，若未使用则主动加载。
    var bIsCssLoaded = false;
    if ($("link[href*=overlay\\.min\\.css]").size() == 0) {
        Util.getStyle(GConfig.LIB_ADDRESS + "overlay/overlay.min.css", function() {
            bIsCssLoaded = true;
        });
    } else {
        bIsCssLoaded = true;
    }
    
    var
        // 图层模板。
        TEMPLATE =
            '<div class="base-overlay tip-overlay">'
            +   '{title}'
            +'</div>',
            
        SHOW_TIME = 1,  // 单位秒。
        
        //事件类型
        EVENT_TYPE = {
            HIDE: "hide"
        },
    
        // 默认配置。
        DEFAULT_CONFIG = {
            title: "",
            type: "error",
            onhide: null,
            target: null,
            offSetLeft: "center",
            offSetTop: "center",
            textAlign: "center"
        }
    ;

    /**
     * 
     * @param {Object} oConfig
     */
    Fn = function (oConfig) {
        if ($.type(oConfig) === "string" || $.type(oConfig) === "number") {
            oConfig = {
                title : oConfig
            };
        };
        
        //合并默认配置
        oConfig = $.extend({}, DEFAULT_CONFIG, oConfig || {});
        oConfig.showTime = oConfig.showTime || SHOW_TIME;
        
        oConfig.content = Util.substitute(TEMPLATE, {
            title : oConfig.title.toString() || "",
            type : oConfig.type
        });
        
        var oThis = this;
        oThis.config = oConfig;     // 保存当前配置项。
        oThis._element = null;
        // alert(JSON.stringify(oConfig));
        
        oThis._init(); // 执行初始化。
        oThis._hide(); //隐藏执行函数
    }
    ;
    
    
    Fn.prototype = {
        /**
         * 初始化。
         * 
         * @method
         * @return {Class}
         */
        _init: function() {
            return this._renderUI();
        },
        
        /**
         * 隐藏处理。
         * 
         * @method
         * @return {Class}
         */
        _hide: function() {
            var cSelf = this;

            // 指定时间后，自动消失。
            setTimeout(function() {
                cSelf.hide();
            }, cSelf.config.showTime * 1000);
            
            return this._destroyEvent();
        },

        /**
         * 弹层摧毁调用执行。
         * 
         * @private
         * @method
         * @return {Class}
         */
        _destroyEvent: function() {
            var cSelf = this;
            
            if(cSelf.getElement() != null){
                cSelf.getElement().on("hide", function() {
                    cSelf.destroy();    // 隐藏即销毁。
                });
            }

            return cSelf;
        },
        
        /**
         * 销毁当前 DOM 结构功能函数。
         * 
         * @method
         * @return {Class}
         */
        destroy: function() {
            var oThis = this,
                jElement = oThis.getElement()
            ;
            
            jElement.remove();

            return oThis;
        },
        
        /**
         * 创建 UI 。
         * 
         * @method
         * @return {Class}
         */
        _renderUI: function() {
            var cSelf = this,
                oConfig = cSelf.config,
                jElement = null
            ;

            if(!$(".tip-overlay").html()){
                
                cSelf._element =
                jElement = $(oConfig.content)
                    .on(EVENT_TYPE.HIDE, oConfig.onhide)
                    .css({"opacity": 0})
                    .appendTo("body")
                ;

                return cSelf.center();  // 立即居中显示。
            };
        },

        /**
         * 获取整个节点对象。
         * 
         * @method
         * @return {jQuery}
         */
        getElement: function() {
            return this._element;
        },
        
        /**
         * 隐藏当前节点。
         * 
         * @method
         * @return {Class}
         */
        hide: function() {
            var oThis = this,
                jElement = oThis.getElement()
            ;
            
            if(jElement != null){
                if (jElement.css("visibility") != "hidden") {   // 仅在非隐藏属性下才触发。
                    jElement.css("visibility", "hidden").trigger(EVENT_TYPE.HIDE, oThis);
                    
                }
            }
            
            return oThis;
        },
        

        /**
         * 水平、垂直居中显示。
         * 会间接的调用 show。
         * 
         * @method
         * @return {Class}
         */
        center: function() {
            var oThis = this,
                jElement = oThis.getElement(),
                jTarget = oThis.config.target
            ;
            setTimeout(function(){
                if(jTarget){
                    var oOffset = jTarget.offset(),
                        nLeft = 0,
                        nTop = 0
                    ;
                    if(oThis.config.offSetLeft && oThis.config.offSetLeft !== "center"){
                        nLeft = oOffset.left + oThis.config.offSetLeft;                        
                    } else{
                        nLeft = oOffset.left + (jTarget.outerWidth() - jElement.outerWidth()) / 2;
                    }

                    if(oThis.config.offSetTop && oThis.config.offSetTop !== "center"){
                        nTop = oOffset.top + oThis.config.offSetTop;
                    } else{
                        // nTop = oOffset.top + jTarget.outerHeight();
                        nLeft = oOffset.top + (jTarget.outerHeight() - jElement.outerHeight()) / 2;
                    }

                    jElement.css({
                        opacity: 1,
                        left: nLeft + "px",
                        top: nTop + "px",
                        textAlign: oThis.config.textAlign
                        // left: (oDocE.clientWidth - jOverlayWin.outerWidth()) / 2,
                        // top: (oDocE.clientHeight - jOverlayWin.outerHeight()) / 2
                        // marginLeft: "-" + (jElement.outerWidth() / 2) + "px",
                        // marginTop:  "-" + (jElement.outerHeight() / 2 + 32) + "px"
                    });
                } else{
                    jElement.css({
                        opacity: 1,
                        // left: (oDocE.clientWidth - jOverlayWin.outerWidth()) / 2,
                        // top: (oDocE.clientHeight - jOverlayWin.outerHeight()) / 2
                        marginLeft: "-" + (jElement.outerWidth() / 2) + "px",
                        marginTop:  "-" + (jElement.outerHeight() / 2 + 32) + "px",
                        textAlign: oThis.config.textAlign
                    });
                }
            }, 100);
            // console.log(this.config.target);
        }
    };
    return Fn;
});