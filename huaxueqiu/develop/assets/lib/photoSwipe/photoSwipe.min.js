/**
 * 手机端图片放大和切换
 *
 * @author xiaochai.dong@guanxin.com
 * @since 2016-05-25
 */


/*
 * 注册模块。
 * 
 * @since 2015-01-30
 * @author xiaochai.dong@guanxin.com
 */
define(["jquery", "util"], function($, Util) {
	// 检测当前页面是否已加载了必要的样式文件，若未使用则主动加载。
	var bIsCssLoaded = false;
	if ($("link[href*=photoSwipe\\.min\\.css]").size() == 0) {
		Util.getStyle(GConfig.LIB_ADDRESS + "photoSwipe/photoSwipe.min.css?bust=" + GConfig.TAG, function() {
			bIsCssLoaded = true;
		});
	} else {
		bIsCssLoaded = true;
	}

	var LAYER_CONTAINER_HTML = '<div class="photoSwipe-layer">' + '<div class="item-box"><ul class="ks-clear"></ul></div>' + '<div class="icon-box"></div>' + '</div>',

		ITEM_HTML = '<li><img defaultSrc="{defaultSrc}" originSrc="{originSrc}" /></li>',

		// 默认配置。
		DEFAULT_CONFIG = {
			targetImgs: null,
			currentIndex: 0,
			// isLoop: false,			//是否循环滚动
			onSwitch: null,//切换图片的时候执行的回调，会把当前选中项的索引值作为参数
			onClose: null, //关闭时候执行的回调，会把当前选中项的索引值作为参数
			errSrc: "./img/ad-defaultD.png" 
		},

		LOADING_CLASS = "loading",
		LOADED_CLASS = "loaded",
        ERR_CLASS = "loadError",

		nContainerWidth = $(window).width(), //容器默认宽度

		MARGIN_WIDTH = 10, //每个图片项之间的左右外边距

		Fn = function(oConfig) {
			var _self = this;

			//调用webview接口
			if (GConfig.isInApp) {
				var asSrc = [];
				oConfig.targetImgs.each(function() {
					var sSrc = _self._getImgOriginSrc($(this));
					asSrc.push(sSrc);
				});

				wv.showPhoto(asSrc, oConfig.currentIndex || 0, true); //默认轮播图的这个可以支持app端保存到图片
				return;
			}

			_self.config = $.extend({}, DEFAULT_CONFIG, oConfig || {});

			_self.nImgCount = oConfig.targetImgs.length; //图片数量
			_self.showIndex = oConfig.currentIndex || 0; //当前显示图片索引

			_self.jLayerContainer = $(LAYER_CONTAINER_HTML).appendTo($("body"));
			_self.jItemBox = _self.jLayerContainer.find(".item-box");
			_self.jIconBox = _self.jLayerContainer.find(".icon-box");

			_self.isAnimating = false; //是否还在执行动画
			_self.moveLeft = 0;

			if (!oConfig.targetImgs || oConfig.targetImgs.length == 0) {
				alert("图片对象为空！");
				return;
			} else {
				// 检测样式是否加载成功。
				if (!bIsCssLoaded) {
					// 轮循检测。
					var nInterval = setInterval(function() {
						if (bIsCssLoaded) {
							// 清除。
							clearInterval(nInterval);
							clearTimeout(nTimeout);

							_self._init(); // 执行初始化。
						}
					}, 100);

					// 超时清除。
					var nTimeout = setTimeout(function() {
						clearInterval(nInterval);

						// 抛出异常。
						throw ("基础样式文件加载超时，PhotoSwipe 初始化失败");
					}, 5 * 1000);
				} else {
					_self._init(); // 执行初始化。
				}
			}
		};

	//方法和扩展属性
	$.extend(Fn.prototype, {
		/**
		 * 初始化
		 * @return {void}
		 */
		_init: function() {
			var _self = this;

			//加载图片项
			_self.config.targetImgs.each(function(i) {
				var jThis = $(this),
					sHtml = Util.substitute(ITEM_HTML, {
						defaultSrc: jThis.attr("defaultSrc") || jThis.attr("src") || jThis.attr("originSrc"),
						originSrc: jThis.attr("originSrc") || jThis.attr("src") || jThis.attr("defaultSrc")
					}),
					jLiItem = $(sHtml);

				// if(jThis.attr("src")){
				// 	jLiItem.find("img").attr("src", jThis.attr("src"))
				// }
				_self.jItemBox.find("ul").append(jLiItem);
				// if(i === _self.showIndex){
				// 	_self.jIconBox.append('<i class="current"></i>');
				// } else{
				// 	_self.jIconBox.append('<i></i>');
				// }
			});
			_self.jIconBox.html((_self.showIndex + 1) + "/" + _self.nImgCount);

			_self.jLayerContainer.css({
				opacity: 0
			});

			_self
				._fnResize()
				// ._loadImg(_self.showIndex, _self._fnFlyOpen)
				.showPic(false, _self.showIndex)
				// ._setPicCenter()
				._fnFlyOpen();

			$(window).on("resize orientationchange", function() {
				_self
					._fnResize()
					._setPicCenter()
				;

				//图片定位容器
				_self.showPic(false, _self.showIndex);
			});
		},

		/**
		 * 对象销毁
		 * 
		 * @method
		 * @reurn {void}
		 */
		destory: function() {
			this.jLayerContainer.remove();
			$("body").removeClass("body-on-overlay");
		},

		/**
		 * 获取节点的src
		 * @param  {Dom} domItem 节点
		 * @return {String}
		 */
		_getImgSrc: function(domItem) {
			return $(domItem).attr("src") || $(domItem).attr("defaultSrc") || $(domItem).attr("originSrc");
		},

		/**
		 * 获取节点的大图src
		 * @param  {Dom} domItem 节点
		 * @return {String}
		 */
		_getImgOriginSrc: function(domItem) {
			return $(domItem).attr("originSrc") || $(domItem).attr("src") || $(domItem).attr("defaultSrc");
		},

		/**
		 * 返回所有图片对象数组
		 * @return {doms}
		 */
		_getAllPicItems: function() {
			return this.jItemBox.find("img");
		},

		/**
		 * 图片居中显示
		 * @param  {Integer} index 渲染第几项
		 */
		_setPicCenter: function(index) {
			var _self = this,
				jImgs = _self._getAllPicItems();

			if (index != undefined) {
				_self._setCenter(index);
			} else {
				jImgs.each(function(i) {
					_self._setCenter(i);
				});
			}
			return _self;
		},

		/**
		 * 计算图片的应用尺寸
		 * @param  {Float} sourceWidth  原图宽
		 * @param  {Float} sourceHeight 原图高
		 * @param  {Float} maxWidth     最大宽
		 * @param  {Float} maxHeight    最大高
		 * @return {Float}              尺寸对象
		 */
		_getPicSizeObj: function(sourceWidth, sourceHeight, maxWidth, maxHeight) {
			if (sourceWidth / sourceHeight >= maxWidth / maxHeight) {
				sourceHeight = sourceHeight * (maxWidth / sourceWidth);
				sourceWidth = maxWidth;
			} else {
				sourceWidth = sourceWidth * (maxHeight / sourceHeight);
				sourceHeight = maxHeight;
			}

			return {
				width: sourceWidth,
				height: sourceHeight
			};
		},

		/**
		 * 设置某一张图片居中
		 * @param  {Integer} index 渲染第几项
		 */
		_setCenter: function(index, callback) {
			var _self = this,
				jThis = _self._getAllPicItems().eq(index),
				sSrc = _self._getImgOriginSrc(jThis),
				jParentBox = jThis.parents("li"),
				nWinWidth = $(window).width(),
				nWinHeight = $(window).height(),
				nMaxWidth = nWinWidth,
				nMaxHeight = nWinHeight,
				nImgSourceWidth = jThis.data("sourceWidth"),
				nImgSourceHeight = jThis.data("sourceHeight"),
				img;

			if (!sSrc) {
				return;
			}

			// if(!jParentBox.hasClass(LOADING_CLASS)){
			// 	return _self;
			// }
			if (nImgSourceWidth) {
				fnCallback();
			} else {
				img = new Image();
				img.src = sSrc;

				if (img.complete) { // 如果图片已经存在于浏览器缓存，直接调用回调函数
					nImgSourceWidth = img.width;
					nImgSourceHeight = img.height;
					jThis.data("sourceWidth", nImgSourceWidth);
					jThis.data("sourceHeight", nImgSourceHeight);
					fnCallback();
					return; // 直接返回，不用再处理onload事件
				}

				jThis.siblings().andSelf().css({
					"opacity": "0"
				});

				img.onload = function() {

					nImgSourceWidth = img.width;
					nImgSourceHeight = img.height;
					jThis
						.data("sourceWidth", nImgSourceWidth)
						.data("sourceHeight", nImgSourceHeight);
					fnCallback();
				}
				img.onerror = function(){
					if(_self.config.errSrc && sSrc != _self.config.errSrc){
						img.src = _self.config.errSrc;
						sSrc = _self.config.errSrc;
						jThis.attr({
							'defaultSrc':  _self.config.errSrc,
							'originSrc': _self.config.errSrc
						});
					}
				}
			}

			//设置尺寸和显示状态
			function fnCallback() {
				var sizeObj = _self._getPicSizeObj(nImgSourceWidth, nImgSourceHeight, nMaxWidth, nMaxHeight);

				jThis.css3({
					transition: ".2s linear all"
				}).css({
					opacity: "1"
				}).siblings().css({
					opacity: "1"
				});

				jThis.css({
						width: sizeObj.width + "px",
						height: sizeObj.height + "px",
						left: ((nMaxWidth - sizeObj.width) / 2) + MARGIN_WIDTH + "px",
						top: ((nMaxHeight - sizeObj.height) / 2) + "px"
					})
					.attr("src", sSrc)
				;

				if (img) {
					img.onload = null;
					img.onerror = null;
					img = null;
				}

				jParentBox.removeClass(LOADING_CLASS).addClass("loaded");
			}
		},

		/**
		 * 加载图片
		 * @param  {Integer} index 渲染第几项
		 */
		_loadImg: function(index) {
			if (index == undefined) {
				return this;
			}
			var _self = this,
				jThis = _self._getAllPicItems().eq(index),
				sSrc = _self._getImgOriginSrc(jThis),
				jParentBox = jThis.parents("li");

			if (jParentBox.hasClass(LOADING_CLASS)) {
				return _self;
			}

			if (!jParentBox.hasClass("loaded") && sSrc) {
				jParentBox.addClass(LOADING_CLASS);

				_self._setCenter(index);

				// if(_self.config.isLoop){//循环的话
				// 	var cloneIndex;
				// 	if(index == 0){
				// 		cloneIndex = _self.sildeItems.length - 2;
				// 	} else if(index == 1){
				// 		cloneIndex = _self.sildeItems.length - 1;
				// 	} else if(index == _self.sildeItems.length - 2){
				// 		cloneIndex = 0;
				// 	} else if(index == _self.sildeItems.length - 1){
				// 		cloneIndex = 1;
				// 	}

				// 	if(cloneIndex != index){
				// 		_self._loadImg(cloneIndex);
				// 	}
				// }
			}
			return _self;
		},

		/**
		 * 加载第几张图片和它旁边的两张图片
		 * @param  {Integer} index 渲染第几项
		 * @returnthis
		 */
		_loadImgAndSide: function (index) {
			var _self = this;
			setTimeout(function(){
				_self._loadImg(index + 1)._loadImg(index - 1);
			}, 200);
			return _self._loadImg(index);
		},

		/**
		 * 计算尺寸和定位
		 */
		_fnResize: function() {
			var _self = this,
				// nWinWidth = $(window).width(),
				nWinHeight = $(window).height(),
				nScrollHeight = nWinHeight //document.body.scrollHeight
			;

			nContainerWidth = $(window).width();

			var nItemWidth = nContainerWidth + MARGIN_WIDTH * 2;

			_self.jLayerContainer
				.css({
					width: nContainerWidth + "px",
					height: nScrollHeight + 　"px"
				});

			// //图片居中定位
			// _self.jLayerContainer.find("img").on("load", function(){
			// 	$(this).css({
			// 		position: "relative",
			// 		top: (nWinHeight - $(this).height()) / 2 + "px"
			// 	});
			// 	
			// 	console.log("load");
			// });

			// if(_self.nImgCount === 1){
			// 	_self.jItemBox.css({"left": "-"+ MARGIN_WIDTH +"px"});
			// } else{
			// 	_self.jItemBox.css({"left": -(nItemWidth * _self._getTrueCurrIndex() + MARGIN_WIDTH) + "px"});
			// }

			_self.jItemBox
				.width(nItemWidth * _self.nImgCount)
				.height(nScrollHeight)
				.find("li")
				.css({
					width: nItemWidth + "px",
					height: nScrollHeight + "px",
					padding: "0 " + MARGIN_WIDTH + "px"
						// "height": nWinHeight+　"px",
						// "marginLeft": MARGIN_WIDTH + "px",
						// "marginRight": MARGIN_WIDTH + "px"
				})
				// .find("img").each(function(i, item){
				// 	var jThis = $(item);

			// 	if(jThis.width()){							
			// 		jThis.css({
			//       			width: jThis.width(),
			//       			height: jThis.height()
			// 		});
			// 	}
			// })
			;



			//icon容器定位
			_self.jIconBox.css({
				"left": (nContainerWidth - _self.jIconBox.width()) / 2 + "px",
				"bottom": "30px"
					// "top": (nScrollTop + nWinHeight - 30) + "px"
			});

			return _self;
		},

		// /**
		//  * 得到图片的原图地址（相对于缩略图）
		//  * @param  {String} src 图片地址
		//  * @return {String}     原图地址
		//  */
		// _getOriginalUrl: function(src){
		// 	if(src && src.toUpperCase().indexOf("/PUBLIC") > -1){//公有图片，预览使用700的图片
		// 		src = src.replace(/\-([1-9])00\./i, "-700.");
		// 	}
		// 	return src;
		// },

		/**
		 * 获取真实当前显示图片索引（如果循环播放的话，+1）
		 */
		_getTrueCurrIndex: function() {
			return this.showIndex;
		},

		/*
		 * 图片放大打开效果
		 */
		_fnFlyOpen: function() {
			var _self = this,
				nWinWidth = $(window).width(),
				nWinHeight = $(window).height(),
				nScrollTop = $("body").scrollTop(),
				jBeginImg = _self.config.targetImgs.eq(_self.showIndex),
				jEndImg = _self.jItemBox.find("li:not(.j_tmp) img").eq(_self.showIndex),
				jParentBox = jEndImg.parents("li"),
				nMaxWidth = nWinWidth,
				nMaxHeight = nWinHeight,
				sSrc = _self._getImgSrc(jBeginImg),
				jTmpImg = jBeginImg.clone().attr("src", sSrc),
				jTmpContainer = $('<div class="photoSwiper-tmpContainer"></div>')
			;

			_self.jLayerContainer.css({
				opacity: 0
			});
			
			_self.scrollTop = $("body").scrollTop();//记录原先的滚动高度

			jTmpImg.on("load", callback);
			jTmpImg.on("error", callback);

			function callback(){
				jTmpContainer.show()
					.append(jTmpImg)
					.appendTo($("body")).css({
						"height": $(window).height() + "px"
					});
				var nAnTime = 400, //动画时间（单位：毫秒）
					nBeginLeft = jBeginImg.offset().left,
					nBeginTop = jBeginImg.offset().top - nScrollTop,
					nBeginWidth = jBeginImg.width(),
					nBeginHeight = jBeginImg.height(),

					sizeObj = _self._getPicSizeObj(jTmpImg.width(), jTmpImg.height(), nMaxWidth, nMaxHeight);

				nScale = sizeObj.width / nBeginWidth,
					nTransX = (nWinWidth - sizeObj.width) / 2 - nBeginLeft,
					nTransY = (nWinHeight - sizeObj.height) / 2 - nBeginTop,

					sTransition = nAnTime + "ms ease",
					sTransform = "translate3D(" + nTransX + "px, " + nTransY + "px, 0px) scale(" + nScale + ")";

				jTmpImg
					.css({
						"left": nBeginLeft + "px",
						"top": nBeginTop + "px",
						"width": nBeginWidth + "px",
						"height": nBeginHeight + "px"
					})
					.css3({
						"transformOrigin": "left top",
						"transition": "transform " + sTransition,
						"transform": sTransform
					});

				_self.isAnimating = true;
				setTimeout(function() {
					_self.isAnimating = false;
					jTmpContainer.remove();
					_self.jLayerContainer.css({
						opacity: 1
					});
					_self._addEventListener();
					// _self._fnBindTouch();
				}, nAnTime);
				$("body").addClass("body-on-overlay");
				jTmpImg.onload = null;
				jTmpImg.onerror = null;
				jTmpImg = null;
			}
		},

		/*
		 * 图片缩小关闭效果
		 */
		_fnFlyClose: function() {

			//先滚动到原先的y轴滚动位置
			/*if(this.scrollTop){				
				$("body").removeClass("body-on-overlay").get(0).scrollTop =  this.scrollTop;
			}*/
			var _self = this,
				nWinWidth = $(window).width(),
				nWinHeight = $("body").outerHeight(),
				nScrollTop = $("body").scrollTop(),
				jBeginImg = _self.jItemBox.find("li:not(.j_tmp) img").eq(_self.showIndex),
				jEndImg = _self.config.targetImgs.eq(_self.showIndex),
				sSrc = _self._getImgSrc(jBeginImg),
				jTmpImg = jBeginImg.clone().attr("src", sSrc),
				jTmpContainer = $('<div class="photoSwiper-tmpContainer"></div>');


			if (_self.isAnimating) {
				return;
			}

			jTmpImg.on("load", callback);
			jTmpImg.on("error", callback);

			function callback(){
				jTmpContainer
					.append(jTmpImg)
					.appendTo($("body")).css({
						"height": $(window).height() + "px"
					})
				;

				var nAnTime = 400, //动画时间（单位：毫秒）
					nBeginScale = parseFloat(jBeginImg.data("scale") || 1),
					nBeginTransX = parseFloat(jBeginImg.data("transX") || 0),
					nBeginTransY = parseFloat(jBeginImg.data("transY") || 0),
					nBeginLeft = (jBeginImg.offset().left - nBeginTransX), //jBeginImg.offset().left,
					nBeginTop = (jBeginImg.position().top - nBeginTransY) ,//+ nScrollTop, //jBeginImg.offset().top,
					nBeginWidth = jBeginImg.width(),
					nBeginHeight = jBeginImg.height(),

					nScale = jEndImg.width() / nBeginWidth,
					nTransX = jEndImg.offset().left - nBeginLeft,
					nTransY = jEndImg.offset().top - nBeginTop - nScrollTop,

					sTransition = nAnTime + "ms ease",
					sTransform = "translate3D(" + nTransX + "px, " + nTransY + "px, 0px) scale(" + nScale + ")";
				// if(nBeginLeft + nTransX < 0){//超出屏幕了
				// 	nTransX = 0;
				// } else if(nBeginLeft + nTransX > nWinWidth){
				// 	nTransX = nWinWidth - nBeginLeft;
				// }
				// if(nBeginTop + nTransY < 0){//超出屏幕了
				// 	nTransY = 0;
				// } else if(nBeginTop + nTransY > $(window).height()){
				// 	nTransY = $(window).height() - nBeginTop;
				// }
				// 
				jTmpImg
					.css({
						"marginTop": 0,

						"left": nBeginLeft + "px",
						"top": nBeginTop + "px",
						"width": nBeginWidth + "px",
						"height": nBeginHeight + "px"
					})
					.css3({
						"transformOrigin": "left top",
						"transition": "transform " + sTransition,
						"transform": sTransform
					});

				setTimeout(function() {
					jTmpContainer.fadeOut().remove();
					_self.destory();
				}, nAnTime);

				jTmpImg.onload = null;
				jTmpImg.onerror = null;
				jTmpImg = null;
			}
		},

		/**
		 * 侦听事件。
		 * 
		 * @private
		 * @method
		 * @return {Class}
		 */
		_addEventListener: function() {
			var _self = this;

			_self._fnBindTouchHandler();
		},

		/**
		 * 手机事件绑定
		 * 
		 * @method
		 * @reurn {void}
		 */
		_fnBindTouchHandler: function() {
			var _self = this,
				_touchType = "", //触碰类型，默认为移动，tap单击；doubleTap双击；swipe挥；move移动；pinch缩放；rotate旋转；长按longPress，pinchEnd缩放结束（特殊的，以防止缩放结束以后马上出发touchmove）
				_prevStartTouchInfo = {}, //上一次开始触碰的信息，用来判断是否双击
				_oStartTouchInfo = {}, //开始触碰时候的位置信息
				_closeTimer = null, //关闭预览定时器
				_startTouchDistance = 0, //多指缩放开始时候手指的对角距离
				TIME_NOT_TAP = 300, //区分是单击或者双击的毫秒数

				//以下是图片移动相关变量
				_picCanMoveX = false, //图片能否水平移动
				_picCanMoveY = false, //图片能否垂直移动
				nWinWidth, //容器宽度
				nWinHeight, //容器高度
				_picMaxXAbs = 0, //水平移动最大绝对值
				_picMaxYAbs = 0, //垂直移动最大绝对值
				_picPrevTransObj = {} //上次图片移动的位置信息
				//     _eventFn = {
				//     	onTap: function(e){
				//      	_closeTimer = setTimeout(function(){
				//      		_self.config.onClose && _self.config.onClose(_self.showIndex);
				//      		_self._fnFlyClose.call(_self);
				//      		goToEnd();
				//      	}, TIME_NOT_TAP - nDur);
				//      	_emitEvent();
				//     	},
				//     	onDoubleTap: function(e){
				//      	clearTimeout(_closeTimer);
				//      	_fnScaleImg(e);
				//      	_self.showPic(true); 
				//     	},
				//     	onSwipe: "",
				//     	onMove: "",
				//     	onPinch: "",
				//     	onRotate: ""            	
				//     },
				//     _emitEvent = function(eventName){
				//     	if(!eventName){
				//     		eventName = "on" + _touchType.substr(0, 1).toUpperCase() + _touchType.substr(1, _touchType.length - 1);
				//     	}
				//     	var e = _emitEvent.caller.arguments;
				//     	console.log(eventName);
				//     	_eventFn[eventName] && _eventFn[eventName].call(e);
				//     }
			;

			/**
			 * 绑定事件绑定滑动
			 */
			(function() {
				_self.jItemBox
					.on("touchstart", _fnTouchStart)
					.on("touchmove", _fnTouchMove)
					.on("touchend", _fnTouchEnd)
					// .on("click", function(){console.log("click");_self._fnFlyClose.call(_self);})
					// .on("dblclick", _fnDblClick)
				;
			})();

			/**
			 * 图片动画控制器
			 */
			var picAnimate = {
				MIN_SCALE: 1, //最小放大值
				MAX_SCALE: 2.5, //最大放大值
				DEFAULT_TRANS: { //默认动画属性
					transX: 0,
					transY: 0,
					transZ: 0,
					scale: 1,
					originX: "50%",
					originY: "50%",
				},

				/**
				 * 读取当前操作的图片对象
				 * @return {dom} 图片对象
				 */
				_getPic: function() {
					var jThis = _self.jItemBox.find("img").eq(_self.showIndex);

					return jThis;
				},

				/**
				 * 读取当前图片节点的上一次动画参数对象
				 * @return {Object} 上一次动画参数对象
				 */
				getLastTrans: function() {
					var jThis = this._getPic(),
						oTrans = jThis.data("trans");

					if (!oTrans) {
						return $.extend({}, this.DEFAULT_TRANS);
					} else {
						return $.extend({}, oTrans);
					}
				},

				/**
				 * 获取当前图片节点的实时动画参数对象
				 * @return {Object} 实时动画参数对象
				 */
				getCurrTrans: function() {
					var jThis = this._getPic(),
						oTrans = jThis.data("trans");

					if (!oTrans) {
						this._setLastTrans($.extend({}, this.DEFAULT_TRANS));

						oTrans = jThis.data("trans");
					}

					return oTrans;
				},

				/**
				 * 设置当前图片节点的动画参数对象
				 * @return {void}
				 */
				_setLastTrans: function(transObj) {
					var jThis = this._getPic();

					jThis.data("trans", transObj);
				},

				/**
				 * 执行动画
				 * @param {Object}  transObj  动画参数
				 * @param  {Boolean} isAnimate 是否动画
				 */
				_setAnimate: function(transObj, isAnimate) {
					var jThis = this._getPic(),
						sTrans = "translate3D(" + transObj.transX + "px, " + transObj.transY + "px, " + transObj.transZ + "px) scale(" + transObj.scale + ")",
						sTransOrigin = transObj.originX + " " + transObj.originY;

					jThis
						.css3({
							transformOrigin: sTransOrigin,
							transitionDuration: "0s",
							transform: sTrans
						});
					if (isAnimate) {
						jThis.css3({
							transitionDuration: "0.2s",
							transitionTimingFunction: "ease-out"
						});
					}

					this._setLastTrans(transObj);

					return this;
				},

				/**
				 * 移动到位置
				 * @param  {Float} transX X轴位移
				 * @param  {Float} transY Y轴位移
				 * @param  {Boolean} isAnimate 是否动画
				 * @return this
				 */
				moveTo: function(transX, transY, isAnimate) {
					var jThis = this._getPic(),
						transObj = this.getLastTrans();

					transObj.transX = transX;
					transObj.transY = transY;

					return this._setAnimate(transObj, isAnimate || false);
				},

				/**
				 * 滚动到位置（目前写不来，以后再实现）
				 * @param  {Float} transX X轴位移
				 * @param  {Float} transY Y轴位移
				 * @return this
				 */
				scrollTo: function(transX, transY) {
					return this.moveTo(transX, transY, true);
				},

				/**
				 * 放大到
				 * @param  {Number} scale 缩放值
				 * @param  {Boolean} isAnimate 是否动画
				 */
				scaleTo: function(scale, isAnimate) {
					var jThis = this._getPic(),
						transObj = this.getLastTrans();

					if (isAnimate && scale > this.MAX_SCALE) {
						scale = this.MAX_SCALE;
					}

					transObj.scale = scale;

					return this._setAnimate(transObj, isAnimate);
				},

				/**
				 * 交替，如果是已经放大了，缩放回1，否则放大到最大状态
				 */
				switchScale: function() {
					var jThis = _self.jItemBox.find("img").eq(_self.showIndex),
						transObj = this.getLastTrans();

					if (transObj.scale > this.MIN_SCALE) {
						return this.reset();
					} else {
						transObj.scale = this.MAX_SCALE;

						return this.scaleTo(transObj.scale, true);
					}
				},

				/**
				 * 结束缩放
				 */
				scaleEnd: function() {
					var jThis = _self.jItemBox.find("img").eq(_self.showIndex),
						transObj = this.getLastTrans();

					
					if (transObj.scale < this.MIN_SCALE) {
						transObj.scale = this.MIN_SCALE;
						this.scaleTo(this.MIN_SCALE, true);
					} else if (transObj.scale > this.MAX_SCALE) {
						transObj.scale = this.MAX_SCALE;
						this.scaleTo(transObj.scale, true);
					}
				},

				/**
				 * 重置状态
				 */
				reset: function() {
					var oTrans = $.extend({}, this.DEFAULT_TRANS);
					this._setAnimate(oTrans, true);
					return this;
				}
			};

			/**
			 * 获取移动坐标信息
			 * 
			 * @method
			 * @reurn {void}
			 */
			function _fnGetTouchPosition(e) {
				e = e.originalEvent || e;
				var event = e.originalEvent || e,
					point = e.touches.length ? e.touches[0] : e.changedTouches.length ? e.changedTouches[0] : e
				oMove = {
					pageX: point.pageX || 0,
					pageY: point.pageY || 0,
					touches: e.touches,
					changedTouches: e.changedTouches
				};

				return oMove;
			}

			/**
			 * 开始事件
			 * 
			 * @method
			 * @reurn {void}
			 */
			function _fnTouchStart(e) {
				_touchType = "";
				// console.log("start");
				// 点击去load左右两边的图片
				_picPrevTransObj = picAnimate.getLastTrans();

				var startTime = new Date().getTime(),
					jThisPic = _self._getAllPicItems().eq(_self.showIndex),
					jThisLi = jThisPic.parent(),
					fTrueWidth = jThisPic.width() * _picPrevTransObj.scale,
					fTrueHeight = jThisPic.height() * _picPrevTransObj.scale,
					oMove = _fnGetTouchPosition(e);

				nWinWidth = $(window).width();
				nWinHeight = $(window).height();

				if (_picPrevTransObj.scale > picAnimate.MIN_SCALE) {
					_picCanMoveX = fTrueWidth > jThisLi.width();
					_picCanMoveY = fTrueHeight > jThisLi.height();
					_picMaxXAbs = Math.abs((fTrueWidth - nWinWidth) / 2);
					_picMaxYAbs = Math.abs((fTrueHeight - nWinHeight) / 2);
				} else {
					_picCanMoveX = false;
					_picCanMoveY = false;
					_picMaxXAbs = 0;
					_picMaxYAbs = 0;
				}

				_oStartTouchInfo = {
					time: startTime,
					pageX: oMove.pageX,
					pageY: oMove.pageY
				};

				e && e.preventDefault();
				e && e.stopPropagation();

				//双击
				if (oMove.touches.length == 1 && _prevStartTouchInfo.time && (startTime - _prevStartTouchInfo.time < TIME_NOT_TAP) && Math.abs(oMove.pageX - _prevStartTouchInfo.pageX) < 10 && Math.abs(oMove.pageY - _prevStartTouchInfo.pageY) < 10) {
					_touchType = "doubleTap";

					clearTimeout(_closeTimer);

					picAnimate.switchScale();
					_self.showPic(true);

					_prevStartTouchInfo = {};
					return;
				} else if (oMove.touches.length > 1) { //多指
					var xLen = Math.abs(oMove.touches[1].pageX - oMove.touches[0].pageX)
					yLen = Math.abs(oMove.touches[1].pageY - oMove.touches[0].pageY);

					_startTouchDistance = Math.sqrt(xLen * xLen + yLen * yLen);
					return;
				}

				//记录上一次点击信息
				_prevStartTouchInfo = {
					time: startTime,
					pageX: oMove.pageX,
					pageY: oMove.pageY
				};
			}

			/**
			 * 移动事件
			 * 
			 * @method
			 * @reurn {void}
			 */
			function _fnTouchMove(e) {
				// console.log("move", _touchType);
				if (_touchType == "doubleTap" || _touchType == "pinchEnd") {
					return;
				}
				var oMove = _fnGetTouchPosition(e),
					nMoveX = oMove.pageX - _oStartTouchInfo.pageX, //本次手指移动的X距离
					nMoveY = oMove.pageY - _oStartTouchInfo.pageY, //本次手指移动的Y距离
					nPicMoveX = _picCanMoveX ? nMoveX + _picPrevTransObj.transX : 0, //图片总的移动X位移
					nPicMoveY = _picCanMoveY ? nMoveY + _picPrevTransObj.transY : 0, //图片总的移动Y位移
					nItemMoveX = 0 //该项li需要移动的X位移	            	
				;

				if (oMove.touches.length > 1) { //多指
					e && e.preventDefault();
					e && e.stopPropagation();
					_touchType = "pinch";

					if (_startTouchDistance) {
						var xLen = Math.abs(oMove.touches[1].pageX - oMove.touches[0].pageX)
						yLen = Math.abs(oMove.touches[1].pageY - oMove.touches[0].pageY)
						touchDistance = Math.sqrt(xLen * xLen + yLen * yLen) //直线距离
						;

						picAnimate.scaleTo(_picPrevTransObj.scale * touchDistance / _startTouchDistance, false);
					}

					return;
				}

				//放大才让图片移动
				if (_picPrevTransObj.scale > picAnimate.MIN_SCALE) {
					if (Math.abs(nPicMoveX) <= _picMaxXAbs) { //X轴没有超出边缘

						picAnimate.moveTo(nPicMoveX, nPicMoveY);

						nItemMoveX = 0;
						return;
					} else {
						if (nPicMoveX < 0) {
							nItemMoveX = nPicMoveX + _picMaxXAbs;
							nPicMoveX = -_picMaxXAbs;
						} else {
							nItemMoveX = nPicMoveX - _picMaxXAbs;
							nPicMoveX = _picMaxXAbs;
						}

						picAnimate.moveTo(nPicMoveX, nPicMoveY);
					}
				} else {
					nItemMoveX = nMoveX;
				}

				/*if(nItemMoveX < 0){//左移
					_self._loadImg(_self.showIndex + 1);
				} else{//右移
					_self._loadImg(_self.showIndex - 1);
				}*/

				_self._setTransform(_self.moveLeft + nItemMoveX, false);
			}

			/**
			 * 结束事件
			 * 
			 * @method
			 * @reurn {void}
			 */
			function _fnTouchEnd(e) {
				// console.log("end",  _touchType);
				if (_touchType == "doubleTap" || _touchType == "pinchEnd") {
					return goToEnd();
				}
				var oMove = _fnGetTouchPosition(e),
					nMoveX = oMove.pageX - _oStartTouchInfo.pageX, //本次手指移动的X距离
					nMoveY = oMove.pageY - _oStartTouchInfo.pageY, //本次手指移动的Y距离
					nPicMoveX = _picCanMoveX ? nMoveX + _picPrevTransObj.transX : 0, //图片总的移动X位移
					nPicMoveY = _picCanMoveY ? nMoveY + _picPrevTransObj.transY : 0, //图片总的移动Y位移
					nItemMoveX = 0 //该项li需要移动的X位移	

					fAbsMoveX = Math.abs(nMoveX),
					fAbsMoveY = Math.abs(nMoveY),
					nDistance = 10, //超出10距离就表示是点击
					nDur = new Date().getTime() - _oStartTouchInfo.time //执行的时间
				;

				//判断触控类型
				if (!_touchType) {
					if (oMove.touches.length == 0 && nDur < 200 && fAbsMoveX < nDistance && fAbsMoveY < nDistance) {
						_touchType = "tap";
					} else if (oMove.touches.length == 1) {
						if (nDur < TIME_NOT_TAP) {
							_touchType = "swipe";
						} else {
							_touchType = "move";
						}
					}
				}

				switch (_touchType) {
					case "tap": //单击
						_closeTimer = setTimeout(function() {
							_self.config.onClose && _self.config.onClose(_self.showIndex);
							_self._fnFlyClose.call(_self);
							return goToEnd();
						}, TIME_NOT_TAP - nDur);
						break;
					case "pinch": //缩放
						picAnimate.scaleEnd();

						if (oMove.changedTouches.length == 1) { //多指变成单指
							_touchType = "pinchEnd";
						}
						return goToEnd();
						break;
					case "rotate": //旋转
					case "doubleTap": //双击
						return goToEnd();
						break;
					case "swipe": //滑动
					case "move": //移动
					default:
						if (_picPrevTransObj.scale > picAnimate.MIN_SCALE) {
							//有超出或者有加速度的话，需要回滚到边缘
							if (Math.abs(nPicMoveX) > _picMaxXAbs || Math.abs(nPicMoveY) > _picMaxYAbs) {
								var picX = nPicMoveX,
									picY = nPicMoveY;
								if (picX > _picMaxXAbs) {
									picX = _picMaxXAbs;
								} else if (picX < -_picMaxXAbs) {
									picX = -_picMaxXAbs;
								}

								if (picY > _picMaxYAbs) {
									picY = _picMaxYAbs;
								} else if (picY < -_picMaxYAbs) {
									picY = -_picMaxYAbs;
								}
								picAnimate.scrollTo(picX, picY);
							}

							if (Math.abs(nPicMoveX) <= _picMaxXAbs) { //X轴没有超出边缘
								nItemMoveX = 0;
								return goToEnd();
							} else {
								if (nPicMoveX < 0) {
									nItemMoveX = nPicMoveX + _picMaxXAbs;
								} else {
									nItemMoveX = nPicMoveX - _picMaxXAbs;
								}
							}
						} else {
							nItemMoveX = nMoveX;
						}
						//---------------------以上图片操作结束

						//忽略手指纵向滚动
						if (fAbsMoveY >= fAbsMoveX) {
							return goToEnd();
						}

						//忽略移动距离比较小
						if (fAbsMoveX < nContainerWidth / 5 && nDur > 200) {
							return goToEnd();
						}

						if (!_self.isAnimating) {
							if (nItemMoveX > 0) {
								if (_self.showIndex > 0) {
									picAnimate.reset();
									_self.showIndex--;
								}
							} else {
								if (_self.showIndex < _self.nImgCount - 1) {
									picAnimate.reset();
									_self.showIndex++;
								}
							}
						}
						
						_self.config.onSwitch && _self.config.onSwitch(_self.showIndex);
						return goToEnd();
						break;
				}

				function goToEnd() {
					_self.showPic(true);
				}
			}
		},

		/**
		 * 显示第几张图片
		 * 
		 * @param {Boolean} isAnimate 是否使用动画
		 * @return {Class}
		 */
		showPic: function(isAnimate, index) {
			var _self = this;

			if (index != undefined) {
				_self.showIndex = index;
			}

			_self._loadImgAndSide(_self.showIndex);

			var nItemWidth = nContainerWidth + MARGIN_WIDTH * 2;

			_self.moveLeft = -_self.showIndex * nItemWidth - MARGIN_WIDTH;

			_self._setTransform(_self.moveLeft, isAnimate);

			_self.jIconBox.html((_self.showIndex + 1) + "/" + _self.nImgCount);

			return this;
		},

		/**
		 * 设置水平移动动画
		 * @param {Integer} transX X轴平移距离
		 * @param {Boolean} isAnimate 是否使用动画
		 */
		_setTransform: function(transX, isAnimate) {
			var _self = this,
				nDuration = isAnimate ? 400 : 0 //动画时间（单位：毫秒）;
			;

			_self.jItemBox.css3({
				"transitionDuration": nDuration + "ms",
				"transform": "translate3D(" + transX + "px, 0px, 0px)"
			});

			if (isAnimate) {
				_self.isAnimating = true;
				setTimeout(function() {
					_self.isAnimating = false;
				}, nDuration);
			}
		}
	});

	/**
	 * jq对象函数扩展
	 */
	$.fn.extend({
		/**
		 * 设置Css3兼容
		 * @param {String || Object} key    样式名称，支持对象方式调用
		 * @param {String} value  样式值
		 */
		css3: function(key, value) {
			var jThis = $(this),
				compatibleArr = ["", "webkit", "moz", "ms", "o"]
			cssObj = {},
				paramObj = {};

			if (typeof key == "object") {
				paramObj = key;
			} else {
				paramObj[key] = value;
			}

			for (var k in paramObj) {
				complieCss(k, paramObj[k]);
			}

			function complieCss(key, value) {
				for (var i = 0; i < compatibleArr.length; i++) {
					var item = compatibleArr[i];
					if (item) {
						cssObj[item + upperFirst(key)] = value;
					} else {
						cssObj[key] = value;
					}
				}

				function upperFirst(str) {
					str = str.substr(0, 1).toUpperCase() + str.substr(1, str.length - 1);

					return str;
				}
			}

			jThis.css(cssObj);
			return jThis;
		}
	});

	return Fn;
});